version: '3.8'
services:
  frontend:
    build:
      context: ./services/frontend
      dockerfile: Dockerfile
    ports:
      - "80:80"
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=http://api:8000  # Use service name for inter-container communication
      # - REACT_APP_METRICS_URL=http://prometheus:9090  # Commented until Prometheus is added
    volumes:
      - ./services/frontend:/app  # Keep for development, remove in production if not needed
    depends_on:
      - api
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]  # Check if web server is running
      interval: 30s
      timeout: 10s
      retries: 5

  api:
    build:
      context: ./services/api
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - PYTHONUNBUFFERED=1
      # Postgres variables (commented until integration is confirmed)
      # - POSTGRES_USER=postgres
      # - POSTGRES_PASSWORD=postgres
      # - POSTGRES_HOST=db
      # - POSTGRES_PORT=5432
      # - POSTGRES_DB=omnimind
      # - DATABASE_URL=postgresql://postgres:postgres@db:5432/omnimind
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=redis
      - REDIS_URL=redis://:redis@redis:6379/0
      - BACKEND_CORS_ORIGINS=["http://localhost","http://localhost:80","http://localhost:3000","http://frontend:80","https://app.apiplatform.ai"]
      - SECRET_KEY=KXWq4ECxVJwFNUfdzpKXOUOavqB_s-Cg0Q7mX03AO0v7bYjmsDv-92l8vbVZxC_j59N_1Af1gL8
      - ALGORITHM=HS256
      - PROMETHEUS_MULTIPROC_DIR=/tmp/prometheus
      - ML_SERVICE_URL=http://ollama:11434
      - OLLAMA_HOST=http://ollama:11434
      - LOG_LEVEL=DEBUG
      # SMTP variables (commented until email integration is implemented)
      # - SMTP_HOST=smtp.gmail.com
      # - SMTP_PORT=587
      # - SMTP_USER=${SMTP_USER:-noreply@omnimind.example.com}
      # - SMTP_PASSWORD=${SMTP_PASSWORD:-your-app-password}
      # - EMAIL_FROM=noreply@omnimind.example.com
      # Celery variables (commented until task queue is implemented)
      # - CELERY_BROKER_URL=redis://:redis@redis:6379/0
      # - CELERY_RESULT_BACKEND=redis://:redis@redis:6379/0
    volumes:
      - ./services/api:/app
    networks:
      - app_network
    depends_on:
      - redis
      - ollama
      # - db  # Uncomment when Postgres is integrated
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # db:
  #   image: postgres:16
  #   environment:
  #     - POSTGRES_USER=postgres
  #     - POSTGRES_PASSWORD=postgres
  #     - POSTGRES_DB=omnimind
  #   volumes:
  #     - pgdata:/var/lib/postgresql/data
  #   networks:
  #     - app_network
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U postgres"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  redis:
    image: redis:7
    command: redis-server --requirepass redis
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  ollama:
    image: ollama/ollama:latest
    ports:
      - "11434:11434"
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  pgdata:

networks:
  app_network:
    driver: bridge